[초보자 면접예상문제]

1. 질문을 못 알아들을 경우
모사와케고자이마셍가, 모우이치도 이떼 이타다케마스까?



1. 경력 체크

★1. 이전 현장에서의 담당 및 투입기간
    * 개별 스킬시트에 있는 부분을 제일 아래부분부터(제일 처음 현장부터) 말하면 됩니다.
    * 프로젝트에 참여한 날짜 -> 언어, 인원수, 프로젝트, 담당기능, 익힌 점 등 구체적 설명

1. 팀은 몇명으로 구성되었나요 ?
    * 보통 10명정도 ... 규모 큰 테스트의 경우 30명까지입니다. (대부분 스킬시트에 작성되어있음)

1. 지금까지 작성해본 코딩은 몇 스텝(ステップ)이나 되냐 ?
    * 조금 애매한 질문이지만, 줄이나 행이 아닌 스텝으로 표현하는 점을 암기합시다.
    엔티티 예를 들면 BEAN,VO의 작성의 경우에는 1000~2000스텝정도 코딩해봤습니다.
    간단한 코딩은 500~1000스텝, 복잡한 코딩은 100~200스텝정도 입니다.
    회원가입기능으로 200~300스텝, 로그인 기능으로 300스텝정도 작성해봤습니다.
    서비스로직의 경우에는 100~200줄 정도 코딩합니다.																								
    하루 작업양으로는 최대 500스텝까지 해봤습니다.

1. 제일 자신있는 공정(工程, こうてい)이 뭐냐?
    세이조입니다.

★1. 설계서는 어느정도까지 써봤냐 ?
    * 떠보기 질문. 보통, 기본설계는 작성안하고 상세설계는 내가 만든 기능에 한해 작성한다는 점을 암기합시다.
    * 또한 실무에서 설계는 마지막단에 수정을 통해 완성이 되기 때문에, 
    * 설계는 "이 사람이 개발을 한개의 현장이라도 잘리지 않고 마지막 단계까지 해본적이 있는가?"에 대한 질문이며,
    * 이는 즉, "이 사람이 개발을 할 수 있는가?"의 평가기준이 되기도 합니다.
    * 설계를 완료해본적이 없다면 중간에 짤렸거나 한 경우로, 필터링 당합니다.
    * 상세설계를 수정만 한 경우에도 개발을 안해본 초보라는 반증이므로 좋게 판단되어지지 않습니다.
    운용설계서나 시스템설계서는 본적만 있지 실제로 작성해본 적은 없습니다.
    대부분 담당한 설계서는 화면상세설계서로, 제가 만드는 기능에 한해 작성했습니다.
    주로 담당했던 모달, GUI, 컴포넌트 등의 설계서 신규작성입니다.
    해당 과정에서 사양이 변경되거나, 추가 작업의 경우, 기본설계서를 추가, 삭제, 수정해가며 작업했습니다.
    기본설계서는 기존에 만들어져 있는 다른 기능을 참조해서, 처음부터 만들어본적도 있습니다.
    상세설계서는 최초설계서에서 코딩을 해가면서 프로퍼티나 사양의 변경사항을 
    설계서에 반영하는 작업은 계속 해왔습니다.
    상세설계서는 지금까지 쭉 써왔기때문에, 프로퍼티 변경, 코드수정후 반영, 신규작성도 가능합니다.

1. 설계서에서 가장 중요하게 생각하는 것은 ?
    * 개발자로서의 커뮤니케이션 센스를 묻는 질문입니다. 어찌보면 가장 중요한 미덕입니다.
    다른 사람들이 봤을 때 바로 무엇을 개발하는지 알수 있도록 
    알기 쉽게 설계하는것이 가장 중요하다고 생각합니다.
    설계는 다른 사람들도 같이 봐야 다음 사람이 무엇을 개발하는지 알수가 있는데
    어려운 설계는 개발환경에 나쁜 영향을 끼쳐서 업무능력을 저하시킨다고 생각합니다.

1. 테스트는 어떤 식으로 진행했나요?
    * 사양서를 수정했다고 하면, 테스트를 "혼자" 해본적 없다고 생각할 것입니다.
    * 요지는 직접 작성했다고 하여, 테스트도 할줄 아는 사람이 되는 것입니다.
    * 단, 사양서는 단체테스트는 본인이 작성하고, 결합테스트는 리더가 작성한다는 점은 외워둡시다.
    단체테스트는 자신이 사양서를 작성하여 테스트하였으나,
    결합테스트는 아직 시스템의 흐름을 전부 파악하지 못하여
    리더가 작성해준 테스트사양서에 맞춰서 했습니다.
    테스트툴(라이브러리)은 Junit를 사용하여 하였습니다.(junit에 대해 물어보면)
    Junit 클래스를 생성하여 테스트 대상의 클래스의 메소드에 값을 넣어가면서 정상종료가 되는 것을 확인가능합니다. 
    제가 단체테스트 사양서를 작성 후 그에 따라서 Junit 테스트 클래스를 만드는 방식으로 테스트하였습니다.
    화면테스트는 각각의 버튼이 설계서 대로 작동하는지 또는 
    화면에 표시되는 내용에 이상함이 없는지를 확인하고, 
    레이아웃이 어긋난다든지, 글자수가 짤리는 등의 장애가 발생하지 않도록 테스트하였습니다.
    회원가입 화면에 별명이라는 새로운 항목이 추가된경우 
    해당 항목에 데이터를 입력하고 입력한 데이터가 데이터베이스에 제대로 입력되는가를 확인하며
    단일테스트 종료 후, 회원데이터가 출력되는 모든 곳을 확인하며 회원정보수정란에서도 별명이 잘 표시되는지,
    글쓰기 화면에서도 별명란에 해당 데이터가 출력되는지 등의 결합테스트까지 하였습니다.

1. 문서 중 수정한 페이지는 몇페이지 정도였습니까?
    프로젝트당 20페이지 정도였습니다.

1. 테스트 할때, 오류 몇 퍼센트(何割, なんわり) 정도 나는가 ? 그 이유는 ?
    10% 정도 오류가 발생하는데, 대부분 단순한 입력 미스 또는 사전데이터의 미입력등의 실수입니다.

1. 테스트 켄수는 몇번 정도였나 ?
    보통 한 테스트에 20~30개 정도의 케이스가 있었는데, 
    복잡한 테스트의 경우에는 20~30개 정도 가능하고, 
    복잡하지 않은 테스트의 경우에는 40~60개까지 해봤습니다.
    화면으로 말하면, 하루에 2~3개 화면정도를 테스트했습니다.

1. 테스트할 때 뭐가 제일 중요하다고 생각합니까 ?
    발견하지 못하는 버그가 생기지 않도록 많은 횟수로 꼼꼼하게 테스트하는 것도 중요합니다만,
    스케줄에 맞게 테스트 하는 것도 중요하다고 생각합니다. 
    현장에 따라, 리더의 성향에 따라 달라지겠지만
    기본적으로는 스케줄에 늦지 않게 하는 작업이 최우선이라고 생각합니다.

1. 예전 현장에서 트러블이 있었다면 어떤 게 있었는지, 대처방법은 뭐였는지 ?
    처음 파견을 나갔을때의 일입니다. 
    개발현장에서의 트러블로 테스트가 원활하게 진행할수 없는 상황이 자주 일어났습니다. 
    테스트를 하다가 원인불명의 이유로 서버가 다운된다든지, 
    원하는 파일을 얻지 못하는 일이 발생했었습니다. 
    대처법으로는 테스트 횟수를 늘려서 작업을 한다던지, 
    주말에도 출근해서 최대한 업무스케줄이 미뤄지지 않도록 했던 적이 있습니다.









2. 기술・지식 체크

2. 가능한 IT스킬은 어떤 것이 있나요 ?   
( 전체적으로 가능한 기술에 대해 설명 )

2. SQL은 어느정도 이용가능한가요 ?
    * 초급
    SQL문은 기본적인 select insert update delete join과 검색(와일드카드) 기능을 사용해서 
    데이터베이스에 있는 데이터를 자유롭게 획득할수 있습니다. 
    메인 언어인 자바의 for반복문, 리스트, 빈 등을 이용해서 
    SQL로 획득한 데이터를 자바에서 사용할수 있도록 가공하는 것이 가능합니다.
    마지막으로 프레임워크인 스프링의 MVC 패턴에 대해 이해하고 있어서 
    controller와 view 부분을 구현 및 수정할줄 알며
    이를 이용해 회원가입, 로그인 그리고 게시판기능을 만들어 본적있습니다. 
    리눅스는 기본적인 커맨드를 이용해서 파일을 만들거나 
    find grep 커맨드를 이용해서 에러로그에 대한 검색은 가능합니다.
    * 중급
    SQL문은 개발에 필요한 CRUD와 JOIN 기능을 자유롭게 사용가능하고, 
    스프링으로 회원가입, 로그인, 게시판의 글쓰기 수정 및 삭제API의 구현이 가능합니다.
    스프링의 MVC패턴에 대해서는 사이트의 게시글보기를 클릭하는 순간
    Board Controller의 getBoardList 메소드를 찾아 
    그 안에 작성되있는 service.getBoardList 메소드를 이용해
    select 쿼리를 DB로 보내주고, 
    DTO와 ModelAndView를 이용해서 데이터를 service로 넘겨주고, 다시 controller로 넘겨준 후,
    최종적으로는 지정된 jsp 화면에서 JSTL의 foreach 기능을 이용해서
    화면에 출력하는 흐름에 대해서 이해하고 있습니다.
    리눅스는 기본적인 touch, find, grep, cat, head 등의 커맨드를 사용할줄 알고, 
    조건문을 사용한 간단한 쉘스크립트 정도는 작성해본적이 있습니다. 
    * 고급
    개발에 필요한 수준의 SQL은 가능합니다.
    Select insert update delete등을 자주 사용하고 있으며,
    간단한 join이라던지 like 같은 기능도 사용가능합니다.
    테이블 생성부터 테이블 수정, CRUD등도 자유롭게 사용할 수 있다고 생각합니다.
    로그인화면에 테이블에 해당 아이디가 있는지 검색에 필요한 select구문이나 , 
    회원가입에 필요한 insert구문, 게시판 수정에 사용하는 update 등 자유롭게 사용가능합니다.																							
    테스트 할때 더미 데이터를 올리고 해당 데이터가 잘 이동하고 있는지 확인할 때, 
    insert 와 select구문 자유롭게 사용할 수 있습니다.													
    회원가입 페이지 기능 구현할 때 select 를 이용해서 데이터베이스 동일한 아이디가 존재하는지 확인하고, 
    일치하는 데이터가 없으면 insert 를 이용해서 유저정보테이블에 입력할수 있습니다.
    게시판 기능 구현할 때 게시글 수정하는 경우 
    update 를 이용해서 해당 게시물의 제목이나 내용 등을 수정할수 있고, 
    삭제 버튼을 눌렀을 경우에도 update를 이용해서 
    삭제플러그를 1에서 0으로 수정하여 화면에 출력되지 않도록 할수있습니다.
		
2. 리눅스는 어느정도 사용가능한가요?
    기본적인 커맨드는 사용가능하고, find나 grep을 이용해서 에러로그분석이 가능합니다.
    CUI식의 테라텀을 사용해서 접속해서 , 디렉토리 생성, 삭제 파일 이동 등은 자유롭게 할 줄 압니다.	
    cp 와 mkdir 을 이용해서 폴더를 생성하고 그 폴더에 cp로 지정한 파일을 이동시키거나
    input 개념을 이용해서 커맨드 입력 후 정상적으로 실행되면 그 결과를 result.txt.에 입력하고, 
    실행되지 않고 에러가 발생하면 해당 로그를 error.log 에 저장시키도록 커맨드가 입력가능합니다.
    head 커맨드를 이용해서 해당 내용의 10번째 줄가지만 출력한다든지, 
    출력된 결과값을 다른 파일로 저장해서 확인할수 있습니다.
    기본적인 커맨드 뿐만 아니라 cat 커맨드를 이용해서 여러개의 파일의 내용을 
    한번에 출력한다던지, 병합시킬수도 있습니다. 
    여러 커맨드의 입력이 필요한 작업의 경우 나노 에디터 이용해서 
    쉘에서 실행되야할 명령어들의 순서를 작성하고 
    if문을 이용해서 참인경우에는 실행되고 조건에 해당되지 않는 경우에는 
    그냥 종료되도록 간단한 쉘스크립트 정도는 작성해본적이 있습니다. 				

2. 프레임워크에 대해서 어느정도 아는지 ?
    기본적인 MVC패턴에 대해서는 이해하고 있습니다. 
    그 중 V와 C인 jsp, 컨트롤러 및 매핑은 신규작성 및 수정해봤습니다.
    M에 해당하는 모델, 서비스, 다오 , 엔티티는 (현장에서는 작성하진 않았지만)
    일인칭으로 만들수 있고, 어떤 방식으로 작동하는지에 대해서 이해하고 있습니다.
    메인 언어가 자바기 때문에 사용해본 프레임워크는 스프링입니다.
    스프링을 사용해서 회원가입, 로그인, 게시판 기능의 웹어플리케이션의 제작을 경험해봤습니다.
    전체적인 MVC패턴에 대한 개념은 이해하고 있습니다. 
    예를 들어 홈페이지에서 게시판버튼을 누르면 컨트롤러에서 해당 매핑값을 확인 후 서비스로 이동, 
    다오를 통해서 DB연에 접속 후 해당 SQL의 결과값을 받고, 
    서비스에서 넘겨받은 데이터를 컨트롤러에서 모델엔뷰를 이용해서 해당.JSP로 보내주고
    마지막으로 JSTL을 이용해서 화면에서 출력하는 흐름이 
    MVC의 기본적인 흐름이라고 이해하고 있습니다.
    어노테이션은 기본적인 컨트롤러, 서비스, 데이터, 오토와이어드, 리포지토리 
    등의 개념을 알고 사용할수 있습니다.

2. 밧치 시스템에 대해서 알고 있습니까 ?
    실제로 업무와 관련해서 다룬적은 없지만 대규모 내용을 일괄적으로 정해진 시간에 
    작업이 가능한 시스템으로 개념은 알고 있습니다. 
    예를 들어 장기 미접속유저를 휴먼계정으로 바꾸는 작업이나 
    생일에 문자 보내는 것도 밧치 시스템에서 하는 작업으로 알고 있습니다.								
    그리고 컴퓨터가 켜지면 저에게 컴퓨터가 켜졌습니다! 
    라고 입력한 메일이 보내지도록 쉘스크립트를 작성하고 
    여러가지 용도별로 모아놓은 파일 세트를 동시에 실행시키는 배치파일을 만들어보며 
    개인적으로 간단하게라도 배치에 대해서 이해하려고 공부하고있습니다. 

2. 개발에서 가장 중요하게 생각하는 것은?
    가장 중요한 것은 커뮤니케이션 능력입니다.
    이는 실제 대면 대화 뿐 아니라,
    다른 사람들이 봤을 때 바로 무엇을 개발하는지 알수 있도록 
    알기 쉽게 개발하는것이 중요하다고 생각합니다. 
    예를 들어 주석처리를 한다던지, 변수명을 이해하게 좋게 만든다던지,
    모델링이라던지, 사양파악이라던지, 문서작성을 포함하여,
    개발 전반에 걸친 가독성을 말합니다.
    개발은 혼자서 하는것이 아니라 팀워크인데 알아보기 힘든 개발은
    다른 사람들의 협력을 구하기 어렵기에 
    개발환경에 나쁜 영향을 업무능력을 저하시킨다고 생각합니다.

2. 의문이 생기면 바로바로 물어보는 것이 중요하다고 생각합니다.
    설계서에 의문이 생기면 단독으로 수정하는게 아니라
    리더에게 바로 물어봐서 개선을 해도 괜찮을지 아니면
    설계서대로 진행할것인지 물어보는 것도 중요하다고 생각합니다.

2. 개발 또는 테스트 중 곤란할 때는 어떻게 대처하나요 ?
    우선 인터넷을 통해 문제점에 대한 해답을 찾아봅니다.
    제 자신이 해결할 수 있는 범위까지는 스스로 해결을 하고
    찾아보고 찾아봐도 해결이 되지 않을것 같다 싶은 부분은
    주위의 동료나 리더에게 자문을 구해서 해결하였습니다.
    혼자서 해결하지 못할 문제로 시간을 낭비하는만큼
    리더나 팀원의 퇴근의 방해하는 상황이 발생할수 있으니
    개인적으로 한시간정도 찾아보고 고민해본 후에도 
    해결되지 않는 문제는 리더나 동료에게 조건을 구합니다.

2. 외부 인터넷접속 차단된 곳에서도 혼자서 다 코딩할수 있냐 ?
    * 현장에서 인터넷접속이 차단된 곳이 가끔 있습니다. 이 질문은 그런 현장에서 받습니다.
    모르는 게 있으면 한번에 3~4개씩 질문을 모아가서 팀원과 리더에게 도움을 구하고, 
    퇴근 후에 개인적으로 공부를 해서 프로젝트의 스케줄에 영향을 끼치지 않도록하겠습니다.

2. 자바 7, 8, 컬렉션에 대해서 아는가 ?
    기본적으로 자바7를 사용해서 코딩을 해왔기때문에 (= 기본적인 for문 for each 문 if 문)
    Java8을 자유자제로 사용하는 레벨은아닙니다. 
    하지만 람다식(lamda)과 Stream에 대한 개념은 알고 있습니다. 
    또한 널체크 하지 않고 옵셔널이 널포인트를 자동으로 처리해주는 객체가 되는 것 정도는 알고 있습니다.
    그러므로, 금방 적응할수 있을거라고 생각됩니다.
    컬렉션에 대해서는 자세히 알고 있지는 않지만 우리가 사용하는 List 와 Map의 개념이라고 이해하고 있습니다.

2. 디비 튜닝 해본 적 있나요 ?
    * pg가 하는 최대한은 인덱스를 조건에 집어넣어주는데, 즉 where 문이라던지. 그러면 검색속도가 빨라집니다.
    전체적으로 디비 튜닝을 해본적은 없는데, 인덱스를 활용해서 속도 향상 작업은 해봤습니다.
    검색양이 많을 때는 컬럼안에 인덱스를 만들어서 집어넣어 검색속도를 더 빠르게 작업해왔습니다.

2. 프레임워크 초기 구축할줄 알아요 ?
    네, 이클립스를 활용해 프로젝트를 생성할 수 있습니다. 
    빌드툴은 메이븐, 그래들 설정 가능하고, 
    (메이븐 : 폼설정 등의 라이브러리 없으면 다운, 바꾸면 지우고 다시 다운 등 하는것)
    MVC패턴으로 (컨 서비스 다오 디티오 구축하고) 화면 DB 연동까지 해서 
    돌아가게 하는 세팅까지는 수차례 했습니다. 
    스프링은 자바 11에서 톰캣9 사용으로 초기 설정까지 해봤고, 
    스프링부트는 롬복을 사용했습니다.

2. 스프링 테스트 해봤어요?
    네, junit으로 테스트했습니다.
    junit 첫번째 테스트 : 유저 검색하는 쿼리를 바꿈(유저삭제가 생겨서 del_flg가 생겼음) -> 테이블내에 기존 데이터를 지움 -> 사전데이터를 input 을 집어넣는다(삭제된 유저 10명, 삭제안된유저 10명) -> junit 클래스를 만듦(검색하는 메소드 서비스를 찾아서 junit이 걔를 호출하면 list로 값을 담아올거다) -> 검색 해봄 (10명이 나와야) assert라는 메소드를 사용해서 실제 취득된 사이즈랑 예상 사이즈를 파라미터로 집어넣어서 일치시 녹색불, 불일치시 빨간불이 들어옴.
    테스트 케이스를 10개를 만들면 junit 메소드도 10개 만들어질것이다.
    junit 두번째 테스트 : junit 안에는 수많은 테스트 케이스를 쌓아왔음. 그걸 다 돌림. (다른 사람꺼의 빨간불 들어오면 내가 바꿔서 영향이 생긴거다)
    무결성 체크하는 중요한 역할을 함

2. 자바스크립트 테스트 해봤어요?
    네, vscode 디버거로 테스트했습니다.
    변수가 많을 경우에는 watch에 직접 변수를 입력해가며 꼼꼼히 테스트했었습니다.








3．개인적 질문

3. 취미가 있습니까 ?
    오시고또오 스루 우에데, 타이세츠니 시떼 키따 코토토시떼, ㅇㅇㅇㅇ오 시떼 오리마시따.

3. 전의 직업은 무엇이었나요 ?
    ㅇㅇㅇ 였습니다. ㅇㅇ의 시대에, ㅇㅇ의 일을 담당했습니다.
    ㅇㅇ하거나 ㅇㅇ하거나 하면서, ㅇㅇ를 몸에 지니게 되었습니다.

3. 왜 전직하셨나요 ? 
    어릴 때부터, IT에 예전부터 흥미가 많았습니다.
    요새는 유투브나 구글 등에서 많은 자료가 생겨나서, 취미로 하다가,
    어린 시절의 꿈을 이루고 싶어서,
    오랜 고민끝에 전직을 결정하게 되었습니다.

3. 한국도 IT 있는데 왜 하필 일본 ?
    첫째는 조용하고, 성실하고, 깨끗한 일본 문화가 좋고 일본에서 살고 싶습니다.
    둘째는 서두르지 않고 신중한 보안과 일처리 방식, 한 만큼 인정받을 수 있는 현재의 일본의 기업문화가 좋습니다.

3. 언제부터 일본에서 공부?
3. 일본어 잘함?
3. 어떻게 일본어 공부했음?
    드라마 보고, 자막 일일이 타이핑
    신문기사보고, 따라서 타이핑하기
    만화책 일어로 보기
    시험을 신청해서 시험준비하면서 공부

3. 어떻게 코딩 공부했음? : 
    유투브 구글 등으로 독학
    IT관련 학원, 과외 다님

3. 잔교할 수 있나요?

3. 사는 곳이 어디신가요?

3. 일본에서 고객 셋쇼우나 우케토리 경험 있음 ?
    개발 현장에서 고객과의 직접적인 면담은 없었습니다.
    다만, 리더에게 스케쥴에 대해서는 이렇게 말씀드리면 좋을 것 같아요 등의 제안은 한 경험이 꽤 있습니다.

3. 메사스(나리타이)모노또까 아리마셍까? 아토데 돈나 유메오 못떼 이마스까? (구체적인 목표)
    가능하다면 프론트엔드 쪽으로 공부를 계속해 시니어 엔지니어가 된 다음, 풀스택 AI 기술자까지 성장하고 싶습니다.

★3. 마지막으로 궁금한 것 있나요?
    모시 겐바니 하이루 코토니 낫따라, 지젠니 난노 벤쿄오오 시테오케바 요로시데쇼까?
    겐바니 카이가이노카타또까 호카노 칸코쿠진노 모노가 이마스까?









4. 현장에서 '욕' 먹는 이유

4. 회의 시간에 질문받는 경우에 답하기
    개발은 회의를 많이 하는데, 검색할 여유가 없음
    머리에 있는걸 끄집어내서 말해야함
    그 적응하는 시기가 오래걸림
    만드는 건 알겠는데
    왜 그렇게 만들었어요?
    하면 설명을 못하면 욕먹는 것

4. 초기 사양파악의 속도
    사양을 완전히 잘 파악해야함.
    그런 부분은 경험이 쌓이기 전까지는 욕먹어야하는 부분

4. 자존심 버리고, 욕을 당연히 먹어야 하는 부분 : 공부로 안되는 부분
    리더가 양상 좀 불안해, 기술이 약해라고 판단당하면,
    일종의 상하관계가 생겨버린다. 
    무시라기보다는 부하가 되서 까라면 까야하는 상황이 많이 생김. 
    요령이 생기면 뭘 빨리 익혀야 무시 안당하는지 몸으로 체득한다. 단기간에 되는게 아니다.

4. 리더가 딴지, 무시를 안걸게 하려면, 반복적으로 잘 설명해서 태클 방어를 잘 하는 경우가 있어야 무시를 안건다.
    예를 들면,
    리더 : 왜 이걸 리스트로 만들었어요? 딴걸로 왜 안했어요?
    나 : 그냥 저기도 리스트로 되있어서 만들었는데요?  x
    나 : 딴데서 리스트 했기 때문에... x
    나 : 두개 처리를 보면 이후에도 리스트 처리하는 것도 있고 해서 했는데, 어떻게 생각해요?... o
    리더 : 그럼 여기서 문제가 생기지 않아요?
    나 : 그런데 이렇게 이렇게 되어도 리스트는 문제가 없는데요... o